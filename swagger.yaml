swagger: "2.0"
info:
  description: |
  The Parscit API allows you integrate our scheduled evening delivery services into your existing eCommerce platform. The integration process is quick and easy. Doing so will allow your customers to select a two hour delivery window in your checkout page if they live in Parscitâ€™s serviceable area. 
  x-logo:
    url: "https://raw.githubusercontent.com/hasan-ahmed/Parscit_Doc/master/logo.png"
  version: "1.0.0"
  title: Parscit
  termsOfService: http://parscit.com
  contact:
    name: hasan.mahmed95@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: parscit.com
basePath: /api/
schemes:
  - http
tags:
  - name: customers
    description: Access to your customers 
  - name: packages
    description: Access to packages you're shipping with Parscit
  - name: cities
    description: Cities in which Parscit is operating
  - name: parscit-location
    description: Address of Parscit delivery processing centers
paths:
  /cities:
    get:
      summary: Get cities in which Parscit operates 
      description: Returns all `cities` where the Parscit delivery service is available
      operationId: getCities
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
      responses:
        '200':
          description: cities response
          schema:
            type: array
            items:
              $ref: '#/definitions/Cities'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /customers:
    post:
      tags:
        - customers
      summary: Add customer
      description: "Creates a `customer` object"
      operationId: addCustomer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: "`customer` object that needs to be added to your store database"
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Customer"
        "405":
          description: Invalid input
    get:
      tags:
        - customers
      summary: Get allcustomers
      description: Returns details about all of your `customers.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: customer response
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'  
  /customers/{id}:
    get:
      tags:
        - customers
      summary: Get details for a customer
      description: Returns details about a `customer` based on a single `id` that was returned when the customer was initally created.
      operationId: findCustomerById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "`id` of `customer` to fetch"
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Customer response
          schema:
            $ref: '#/definitions/Customer'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
        - customers
      summary: Update a customer
      description: "Update the details of an existing `customer` based on a single `id` (returned upon customer creation)."
      operationId: updateCustomer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "`id` of `customer` to update"
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Customer response
          schema:
            $ref: '#/definitions/Customer'
        "405":
          description: Validation exception
        "404":
          description: Pet not found
        "400":
          description: Invalid ID supplied
  /packages:
    post:
      tags:
        - packages
      summary: Create a package
      description: "Creates a `package` for Parscit to ship."
      operationId: addPackage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: "`package` object that needs to be delivered"
          required: true
          schema:
            $ref: "#/definitions/Packages"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Packages"
        "405":
          description: Invalid input
    get:
      tags:
        - packages
      summary: Get all of your packages
      description: "Returns all your `packages` that have been sent to parscit"
      operationId: findPackages
      produces:
        - application/json
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Package response
          schema:
            type: array
            items:
              $ref: '#/definitions/Packages'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'  
  /packages/{id}:
    get:
      tags:
        - packages
      summary: Search for a package
      description: "Returns a `package` based on a single `id` (provided upon package creation)"
      operationId: findPackageById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "`id` of `package` to fetch"
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Package response
          schema:
            $ref: '#/definitions/Packages'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
        - packages
      summary: Update package
      description: "Update an existing `package` object by a unique `id` (provided upon package creation)"
      operationId: updatePackage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "`id` of package to update"
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Package response
          schema:
            $ref: '#/definitions/Packages'
        "405":
          description: Validation exception
        "404":
          description: Pet not found
        "400":
          description: Invalid ID supplied
  /closestLocation/{id}:
    get:
      tags:
        - parscit-location
      summary: Get closest Parscit center to a customer
      description: Returns a `location` based on a single `customer`
      operationId: findClosestLocationByCustomer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "`customer id` for which to find to closest `location`"
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Locaiton response
          schema:
            $ref: '#/definitions/ParscitLocation'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
definitions:
  Customer:
    type: object
    required:
      - date_created
      - first_name
      - last_name
      - email
      - phone
      - address_street
      - address_city
      - address_state
      - address_postalCode
    properties:
      date_created:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      phone:
        type: string
      address_street:
        type: string
      address_city:
        type: string
      address_state:
        type: string
      address_postalCode:
        type: string
  Packages:
    type: object
    required:
      - date_created
      - custID
      - description
      - tracking_number
      - deliver_on_date
      - deliver_on_dow
      - deliver_time_begin
      - deliver_time_end
    properties:
      date_created:
        type: string
      custID:
        type: string
      description:
        type: string
      tracking_number:
        type: string
      notes:
        type: string
      deliver_on_date:
        type: string
      deliver_on_dow:
        type: string
      deliver_time_begin:
        type: string
      deliver_time_end:
        type: string
      weight:
        type: integer
      height:
        type: integer
  Cities:
    type: object
    required:
      - city
    properties:
      city:
        type: string
  ParscitLocation:
    type: object
    required:
      - address_street
      - address_city
      - address_state
      - address_postalCode
    properties:
      address_street:
        type: string
      address_city:
        type: string
      address_state:
        type: string
      address_postalCode:
        type: string
  errorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      
