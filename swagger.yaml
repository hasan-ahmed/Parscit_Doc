swagger: "2.0"
info:
  description: |
    # Introduction
    The Parscit API allows you integrate our scheduled evening delivery services into your existing eCommerce platform. The integration process is quick and easy! Once you have completed the implementation,  your customers will be able to select a two hour delivery window in your checkout page if they live in Parscit’s serviceable area. 
    # Overview
    To offer Parscit’s services to your customers, your application must execute the following steps:
      - Make a POST request to `/cities` to check if the shopper lives in Parscit’s serviceable area
      - Offer the Parscit delivery service as an additional shipping option if they do live in Parscit’s serviceable area.
      - Create an order by making a POST request to `/orders`. Upon success, the response will include the address of the Parscit Warehouse that you should ship that order to along with an order id that you must include on the shipping label. 
      - Ship the box to the Parscit warehouse address provided to you. 
    # API Basics
      - All requests must include the `Content-Type: application/json`
      - Please note that we have provided you with both a test and production API key. Orders created with your test API key will not be executed. Only use your production API key once you are ready to ship real orders.
    # Authentication
    You must include the following header in every request to authenticate:
      - `X-api-key: <your API key>`



  x-logo:
    url: "https://raw.githubusercontent.com/hasan-ahmed/Parscit_Doc/master/logo.png"
  version: "1.0.0"
  title: Parscit
  termsOfService: http://parscit.com
  contact:
    email: hasan.mahmed95@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: parscit.com
basePath: /api/
schemes:
  - http
tags:
  - name: orders
    description: Access to your orders
  - name: cities
    description: Cities in which Parscit is operating
paths:
  /cities:
    post:
      tags:
        - cities
      summary: Verify if the `city` specified by your customer is valid 
      description: |
        Returns **true** if the city provided is in Parscit's serviceable area. Returns **false** otherwise. 
        **Important**: It is crucial that you make a call to this endpoint before displaying Parscit as a delivery option in your checkout page.
      operationId: verifyCity
      onsumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: "`city` entered by your customer that you wish to verify"
          required: true
          schema:
            $ref: "#/definitions/Cities"
      responses:
        "200":
          description: Successful operation. 
          schema:
            $ref: "#/definitions/VerifyCity"
        "400":
          description: Bad request. Invalid or missing parameter.
        "401":
          description: Unauthorized. API key is missing or invalid. 
  /customers:
    post:
      tags:
        - customers
      summary: Add customer
      description: "Creates a `customer` object"
      operationId: addCustomer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: "`customer` object that needs to be added to your store database"
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Customer"
        "405":
          description: Invalid input
    get:
      tags:
        - customers
      summary: Get allcustomers
      description: Returns details about all of your `customers.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: customer response
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'  
  /customers/{id}:
    get:
      tags:
        - customers
      summary: Get details for a customer
      description: Returns details about a `customer` based on a single `id` that was returned when the customer was initally created.
      operationId: findCustomerById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "`id` of `customer` to fetch"
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Customer response
          schema:
            $ref: '#/definitions/Customer'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
        - customers
      summary: Update a customer
      description: "Update the details of an existing `customer` based on a single `id` (returned upon customer creation)."
      operationId: updateCustomer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "`id` of `customer` to update"
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Customer response
          schema:
            $ref: '#/definitions/Customer'
        "405":
          description: Validation exception
        "404":
          description: Pet not found
        "400":
          description: Invalid ID supplied
  /orders:
    post:
      tags: 
        - orders
      summary: Create an order
      description: "Created an 'order' for Parscit to ship to your `customer`. This request returns crucial information that you must save in your systems. Most notably, the order **id**."
      operationId: addOrder
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: "`package` object that needs to be delivered"
          required: true
          schema:
            $ref: "#/definitions/Orders"
      esponses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Orders_Response"
        "405":
          description: Validation exception
        "404":
          description: Pet not found
        "400":
          description: Invalid ID supplied
  /packages:
    post:
      tags:
        - packages
      summary: Create a package
      description: "Creates a `package` for Parscit to ship."
      operationId: addPackage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: "`package` object that needs to be delivered"
          required: true
          schema:
            $ref: "#/definitions/Packages"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Packages"
        "405":
          description: Invalid input
    get:
      tags:
        - packages
      summary: Get all of your packages
      description: "Returns all your `packages` that have been sent to parscit"
      operationId: findPackages
      produces:
        - application/json
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Package response
          schema:
            type: array
            items:
              $ref: '#/definitions/Packages'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'  
  /packages/{id}:
    get:
      tags:
        - packages
      summary: Search for a package
      description: "Returns a `package` based on a single `id` (provided upon package creation)"
      operationId: findPackageById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "`id` of `package` to fetch"
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Package response
          schema:
            $ref: '#/definitions/Packages'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
        - packages
      summary: Update package
      description: "Update an existing `package` object by a unique `id` (provided upon package creation)"
      operationId: updatePackage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "`id` of package to update"
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Package response
          schema:
            $ref: '#/definitions/Packages'
        "405":
          description: Validation exception
        "404":
          description: Pet not found
        "400":
          description: Invalid ID supplied
  /closestLocation/{id}:
    get:
      tags:
        - parscit-location
      summary: Get closest Parscit center to a customer
      description: Returns a `location` based on a single `customer`
      operationId: findClosestLocationByCustomer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: "`customer id` for which to find to closest `location`"
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Locaiton response
          schema:
            $ref: '#/definitions/ParscitLocation'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
definitions:
  Customer:
    type: object
    required:
      - first_name
      - last_name
      - email
      - phone
    properties:
      date_created:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      phone:
        type: string
  Shipping_Address:
    type: object
    required:
      - address
      - city
      - country
      - state 
      - zip
    properties:
      address:
        description: The number and street name of the customer's shipping address.
        type: string
        example: 257 Westminster Ave. North
      city:
        description: The city of the customer's shipping address.
        type: string
        example: Montreal
      country:
        description: The counry of the customer's shipping address.
        type: string
        example: Canada
      state:
        description: The state/province of the customer's shipping address.
        type: string
        example: QC
      zip:
        description: The Zip Code of the customer's shipping address.
        type: string
        example: H4X 1Z5
  Orders:
    type: object
    required:
      - shipping_address 
      - customer
      - delivery_time_begin
      - delivery_time_end
    properties:
      shipping_address:
        description: The shipping address of the customer. 
      shipping_address:
        description: The customer's information. 
      tracking_url:
        description: The tracking link provided to you by your shipping carrier of choice for this specific package. 
        type: string
        example: http://wwwapps.ups.com/WebTracking/track?trackNums=1212312
      total_price:
        description: The total price of the order.
        type: float 
        example: 29.99
      total_weight:
        description: The total weight of the package in pounds (lbs). 
        type: float
        example: 5.0
      items:
        description: List of iterms included in the order.
        type: array
        items:
          $ref: '#/definitions/Item'
      delivery_time_begin:
        description: The beginning of the two hour delivery window specified by the customer. Parscit currently only offers evening deliveries from the hours of 6:00 pm to 12:00 pm. 
        type: string
        example: 7:00 
      delivery_time_end:
        description: The end of the two hour delivery window specified by the customer. Parscit currently only offers evening deliveries from the hours of 6:00 pm to 12:00 pm. 
        type: string
        example: 9:00  
  Orders_Response:
    type: object
    required:
      - id
      - created_at
      - shipping_address 
      - customer
      - delivery_time_begin
      - delivery_time_end
    properties:
      id:
        description: Unique identifier for this order. Save this `id` in your systems so that you may visibly include it on the shipping label.
        type: integer
        format: int32
        example: 3282313
      created_at:
        description: A timestamp of when the order was created.
        type: string
        format: date 
        example: 2016-11-10T01:56:34-05:00
      shipping_address:
        description: The shipping address of the customer. 
      shipping_address:
        description: The customer's information. 
      tracking_url:
        description: The tracking link provided to you by your shipping carrier of choice for this specific package. 
        type: string
        example: http://wwwapps.ups.com/WebTracking/track?trackNums=1212312
      total_price:
        description: The total price of the order.
        type: float 
        example: 29.99
      total_weight:
        description: The total weight of the package in pounds (lbs). 
        type: float
        example: 5.0
      items:
        description: List of iterms included in the order.
        type: array
        items:
          $ref: '#/definitions/Item'
      delivery_time_begin:
        description: The beginning of the two hour delivery window specified by the customer. Parscit currently only offers evening deliveries from the hours of 6:00 pm to 12:00 pm. 
        type: string
        example: 7:00 
      delivery_time_end:
        description: The end of the two hour delivery window specified by the customer. Parscit currently only offers evening deliveries from the hours of 6:00 pm to 12:00 pm. 
        type: string
        example: 9:00 
  Item:
    type: object
    required: 
      - name
    properties:
      name:
        description: The name of the item. 
        type: string
        example: Black T-Shirt
      description:
        description: Detailed description of the item.
        type: string
        example: Small plain black t-shirt. 100% cotton. 
  Packages:
    type: object
    required:
      - date_created
      - custID
      - description
      - tracking_number
      - deliver_on_date
      - deliver_on_dow
      - deliver_time_begin
      - deliver_time_end
    properties:
      date_created:
        type: string
      custID:
        type: string
      description:
        type: string
      tracking_number:
        type: string
      notes:
        type: string
      deliver_on_date:
        type: string
      deliver_on_dow:
        type: string
      deliver_time_begin:
        type: string
      deliver_time_end:
        type: string
      weight:
        type: integer
      height:
        type: integer
  Cities:
    type: object
    required:
      - city
    properties:
      city:
        description: City enterd by the customer.
        type: string
        example: Montreal
  VerifyCity:
    type: object
    required:
      - valid
    properties:
      valid:
        type: boolean
  ParscitLocation:
    type: object
    required:
      - address_street
      - address_city
      - address_state
      - address_postalCode
    properties:
      address_street:
        type: string
      address_city:
        type: string
      address_state:
        type: string
      address_postalCode:
        type: string
  errorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      
